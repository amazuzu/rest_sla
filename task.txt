To provide Service Level Agreement (SLA) for our REST endpoint,
we need a RequestThrottlingService, which would limit requests per second (RPS) for each user.

Assume you already have a service, which returns maximum allowed RPS and username for the user,
identified by a token from request's 'Authorization' header.

case class Sla(userName:String, maxRps:Int)

trait SLAService {
def getSlaByToken(token:String):Future[Sla]
}

You should implement:

trait ThrottlingService {

  val GraceRps:Int // configurable

  val slaService: SLAService // use mocks for testing
  // Should return true if the request is within allowed RPS.
  def isRequestAllowed(token:Option[String]):Boolean = ???

}

Rules for RPS counting:
1. If no token provided, assume the client as unauthorized.
   All unauthorized user's requests are limited by GraceRps

2. If request has a token, but slaService has not returned any info yet, treat it as unauthorized user

3. If request has token, and we have maxRPS for the user -- count RPS by its username (user may have several different tokens)

4. SLA should be counted by intervals of 1/10 second (i.e. if RPS limit is reached, after 1/10 second ThrottlingService should allow 10% more requests)

Note:
1. SLA information is changed quite rarely and SLAService is quite costly to call, so consider caching SLA requests. Also, you should not query the service, if the same token request is already in progress.

2. ThrottlingService must be threadsafe, will be called from several threads concurrently.
   Must not wait or block, it should return the result immediately.
   Use as less locking and synchronization as possible

The solution should contain a project with
* implementation of ThrottlingService
* tests that prove validity of the code
* load test to measure overhead of using ThrottlingService service, compared with same rest endpoint with no ThrottlingService

Our actual REST services use scala/java, spray, akka, maven.
But for this assigment you can use any frameworks you want